#!/usr/bin/env node

var program = require('commander');
var mkdirp = require('mkdirp');
var os = require('os');
var fs = require('fs');
var path = require('path');

var pkg = require('../package.json');

var version = pkg.version;

// CLI

program
    .version(version)
    .usage('[options] [dir]')
    .option('-e, --ejs', 'add ejs engine support (defaults to jade)')
    .option('    --hbs', 'add handlebars engine support')
    .option('-H, --hogan', 'add hogan.js engine support')
    .option('-c, --css <engine>',
        'add stylesheet <engine> support (less|stylus|compass) (defaults to plain css)'
)
    .option('-f, --force', 'force on non-empty directory')
    .parse(process.argv);

// Path

var destination_path = program.args.shift() || '.';

// App name

var app_name = path.basename(path.resolve(destination_path));

// end-of-line code

var eol = os.EOL

// Template engine

program.template = 'jade';
if (program.ejs) program.template = 'ejs';
if (program.hogan) program.template = 'hjs';
if (program.hbs) program.template = 'hbs';

function load_template(name) {
    return fs.readFileSync(path.join(__dirname, '..', 'templates', name),
        'utf-8').replace(/{name}/g, app_name);
}

// CSS

var css = fs.readFileSync(__dirname + '/../templates/css/style.css', 'utf-8');
var less = fs.readFileSync(__dirname + '/../templates/css/style.less', 'utf-8');
var stylus = fs.readFileSync(__dirname + '/../templates/css/style.styl', 'utf-8');
var compass = fs.readFileSync(__dirname + '/../templates/css/style.scss', 'utf-8');

// APP

var appFiles = [
    { name: 'app', from: 'js/app.js', to: '/app.js'},
    { name: 'sampleConfig', from: 'js/sample-config.js', to: '/sample-config.js'},
    { name: 'gitIgnore', from: '_gitignore', to: '/.gitignore'},
    { name: 'arcConfig', from: '_arcconfig', to: '/.arcconfig'},
    { name: 'readme', from: 'README.md', to: '/README.md'},
    { name: 'binDeploy', from: 'bin/deploy', to: '/bin/deploy', mode: 0755},
    { name: 'binDocker', from: 'bin/docker', to: '/bin/docker', mode: 0755},
    { name: 'binInitDb', from: 'bin/initdb', to: '/bin/initdb', mode: 0755},
    { name: 'binMinify', from: 'bin/minify', to: '/bin/minify', mode: 0755},
    { name: 'binSetup', from: 'bin/setup', to: '/bin/setup', mode: 0755},
    { name: 'cfgInit', from: 'cfg/init/init.conf', to: '/cfg/init/' + app_name + '.conf'},
    { name: 'cfgLogrotate', from: 'cfg/logrotate/logrotate', to: '/cfg/logrotate/' + app_name},
    { name: 'cfgNginx', from: 'cfg/nginx/nginx', to: '/cfg/nginx/' + app_name + '.zyobalabs.com'},
    { name: 'deployConf', from: 'deploy/deploy.conf', to: '/deploy/deploy.conf'},
    { name: 'modelIndex', from: 'js/models/index.js', to: '/models/index.js'},
    { name: 'routesIndex', from: 'js/routes/index.js', to: '/routes/index.js'},
    { name: 'routesHome', from: 'js/routes/home.js', to: '/routes/home.js'},
];

var appdata = {};

appFiles.forEach(function (e) {
    appdata[e.name] = {
        data: load_template(e.from),
        to: e.to,
        mode: e.mode
    };
});

// Generate application

(function createApplication(path) {
    emptyDirectory(path, function (empty) {
        if (empty || program.force) {
            createApplicationAt(path);
        } else {
            program.confirm('destination is not empty, continue? ',
                function (ok) {
                    if (ok) {
                        process.stdin.destroy();
                        createApplicationAt(path);
                    } else {
                        abort('aborting');
                    }
                });
        }
    });
})(destination_path);

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplicationAt(path) {
    console.log();
    process.on('exit', function () {
        console.log();
        console.log('   install dependencies:');
        console.log('     $ cd %s && npm install', path);
        console.log();
        console.log('   update config');
        console.log('      $ cp sample-config.js config.js');
        console.log();
        console.log('   run the app:');
        console.log('     $ DEBUG=' + app_name + ' node app');
        console.log();
    });

    mkdir(path, function () {
        mkdir(path + '/public');
        mkdir(path + '/public/js');
        mkdir(path + '/public/images', function() {
            copy_template('images/favicon.ico', path + '/public/images/favicon.ico');
        });
        mkdir(path + '/public/css', function () {
            switch (program.css) {
            case 'less':
                write(path + '/public/css/style.less', less);
                break;
            case 'stylus':
                write(path + '/public/css/style.styl', stylus);
                break;
            case 'compass':
                write(path + '/public/css/style.scss', compass);
                break;
            default:
                write(path + '/public/css/style.css', css);
            }
        });

        mkdir(path + '/views', function () {
            switch (program.template) {
            case 'ejs':
                copy_template('ejs/index.ejs', path +
                    '/views/index.ejs');
                copy_template('ejs/error.ejs', path +
                    '/views/error.ejs');
                break;
            case 'jade':
                copy_template('jade/index.jade', path +
                    '/views/index.jade');
                copy_template('jade/layout.jade', path +
                    '/views/layout.jade');
                copy_template('jade/error.jade', path +
                    '/views/error.jade');
                break;
            case 'hjs':
                copy_template('hogan/index.hjs', path +
                    '/views/index.hjs');
                copy_template('hogan/error.hjs', path +
                    '/views/error.hjs');
                break;
            case 'hbs':
                copy_template('hbs/index.hbs', path +
                    '/views/index.hbs');
                copy_template('hbs/layout.hbs', path +
                    '/views/layout.hbs');
                copy_template('hbs/error.hbs', path +
                    '/views/error.hbs');
                break;
            }
        });

        // CSS Engine support
        switch (program.css) {
        case 'less':
            appdata.app.data = appdata.app.data.replace('{css}', eol +
                'app.use(require(\'less-middleware\')(path.join(__dirname, \'public\')));'
            );
            break;
        case 'stylus':
            appdata.app.data = appdata.app.data.replace('{css}', eol +
                'app.use(require(\'stylus\').middleware(path.join(__dirname, \'public\')));'
            );
            break;
        case 'compass':
            appdata.app.data = appdata.app.data.replace('{css}', eol +
                'app.use(require(\'node-compass\')({mode: \'expanded\'}));'
            );
            break;
        default:
            appdata.app.data = appdata.app.data.replace('{css}', '');
        }

        // Template support
        appdata.app.data = appdata.app.data.replace('{views}', program.template);

        // package.json
        var pkg = {
            name: app_name,
            version: '0.0.1',
            private: true,
            scripts: {
                start: 'node app'
            },
            dependencies: {
                'express': '~4.9.0',
                'body-parser': '~1.8.1',
                'cookie-parser': '~1.3.3',
                'morgan': '~1.3.0',
                'serve-favicon': '~2.1.3',
                'debug': '~2.0.0',
                'proc-utils': '*',
                'smush': '*',
                'mysql': '2',
                'anydb-sql': '0',
                'model-gen': 'git+ssh://git@phabricator.zyoba.org/diffusion/ZBMG/model-gen.git'
            }
        }

        switch (program.template) {
        case 'jade':
            pkg.dependencies['jade'] = '~1.6.0';
            break;
        case 'ejs':
            pkg.dependencies['ejs'] = '~0.8.5';
            break;
        case 'hjs':
            pkg.dependencies['hjs'] = '~0.0.6';
            break;
        case 'hbs':
            pkg.dependencies['hbs'] = '~2.7.0';
            break;
        default:
        }

        // CSS Engine support
        switch (program.css) {
        case 'less':
            pkg.dependencies['less-middleware'] = '1.0.x';
            break;
        case 'compass':
            pkg.dependencies['node-compass'] = '0.2.3';
            break;
        case 'stylus':
            pkg.dependencies['stylus'] = '0.42.3';
            break;
        default:
        }

        write(path + '/package.json', JSON.stringify(pkg, null, 2));

        var key;
        for (key in appdata) {
            var entry = appdata[key];

            (function(entry){
                mkdir(require('path').dirname(path + entry.to), function() {
                    write(path + entry.to, entry.data, entry.mode);
                });
            })(entry);
        }

        // Create symlinks
        fs.symlinkSync('../node_modules/proc-utils/bin/cluster', path + '/bin/cluster');
        fs.symlinkSync('../node_modules/proc-utils/bin/deploy.sh', path + '/deploy/deploy.sh');
    });
}

function copy_template(from, to) {
    from = path.join(__dirname, '..', 'templates', from);
    write(to, fs.readFileSync(from, 'utf-8'));
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
    fs.readdir(path, function (err, files) {
        if (err && 'ENOENT' != err.code) throw err;
        fn(!files || !files.length);
    });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str, mode) {
    fs.writeFile(path, str, {
        mode: mode || 0666
    });
    console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
    mkdirp(path, 0755, function (err) {
        if (err && 'EEXIST' === err.code) {
            // already exists dir, ignore error
            return fn && fn();
        } else if (err) {
            throw err;
        }
        console.log('   \033[36mcreate\033[0m : ' + path);
        fn && fn();
    });
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
    console.error(str);
    process.exit(1);
}
